package com.liyiwei.basethirdlib.dbgreendao.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.liyiwei.basethirdlib.dbgreendao.bean.ExamPaperConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXAM_PAPER_CONFIG".
*/
public class ExamPaperConfigDao extends AbstractDao<ExamPaperConfig, Integer> {

    public static final String TABLENAME = "EXAM_PAPER_CONFIG";

    /**
     * Properties of entity ExamPaperConfig.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PaperId = new Property(0, Integer.class, "paperId", true, "PAPER_ID");
        public final static Property LineId = new Property(1, Integer.class, "lineId", false, "LINE_ID");
    }


    public ExamPaperConfigDao(DaoConfig config) {
        super(config);
    }
    
    public ExamPaperConfigDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXAM_PAPER_CONFIG\" (" + //
                "\"PAPER_ID\" INTEGER PRIMARY KEY ," + // 0: paperId
                "\"LINE_ID\" INTEGER);"); // 1: lineId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXAM_PAPER_CONFIG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ExamPaperConfig entity) {
        stmt.clearBindings();
 
        Integer paperId = entity.getPaperId();
        if (paperId != null) {
            stmt.bindLong(1, paperId);
        }
 
        Integer lineId = entity.getLineId();
        if (lineId != null) {
            stmt.bindLong(2, lineId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ExamPaperConfig entity) {
        stmt.clearBindings();
 
        Integer paperId = entity.getPaperId();
        if (paperId != null) {
            stmt.bindLong(1, paperId);
        }
 
        Integer lineId = entity.getLineId();
        if (lineId != null) {
            stmt.bindLong(2, lineId);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    @Override
    public ExamPaperConfig readEntity(Cursor cursor, int offset) {
        ExamPaperConfig entity = new ExamPaperConfig( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // paperId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1) // lineId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ExamPaperConfig entity, int offset) {
        entity.setPaperId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setLineId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(ExamPaperConfig entity, long rowId) {
        return entity.getPaperId();
    }
    
    @Override
    public Integer getKey(ExamPaperConfig entity) {
        if(entity != null) {
            return entity.getPaperId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ExamPaperConfig entity) {
        return entity.getPaperId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
