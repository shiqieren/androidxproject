package com.liyiwei.basethirdlib.dbgreendao.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.liyiwei.basethirdlib.dbgreendao.bean.SubDownloadInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUB_DOWNLOAD_INFO".
*/
public class SubDownloadInfoDao extends AbstractDao<SubDownloadInfo, Long> {

    public static final String TABLENAME = "SUB_DOWNLOAD_INFO";

    /**
     * Properties of entity SubDownloadInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Pid = new Property(1, String.class, "pid", false, "PID");
        public final static Property Start = new Property(2, long.class, "start", false, "START");
        public final static Property End = new Property(3, long.class, "end", false, "END");
        public final static Property Index = new Property(4, int.class, "index", false, "INDEX");
        public final static Property Path = new Property(5, String.class, "path", false, "PATH");
        public final static Property Url = new Property(6, String.class, "url", false, "URL");
        public final static Property Status = new Property(7, int.class, "status", false, "STATUS");
    }

    private Query<SubDownloadInfo> downloadInfo_InfosQuery;

    public SubDownloadInfoDao(DaoConfig config) {
        super(config);
    }
    
    public SubDownloadInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUB_DOWNLOAD_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PID\" TEXT," + // 1: pid
                "\"START\" INTEGER NOT NULL ," + // 2: start
                "\"END\" INTEGER NOT NULL ," + // 3: end
                "\"INDEX\" INTEGER NOT NULL ," + // 4: index
                "\"PATH\" TEXT," + // 5: path
                "\"URL\" TEXT," + // 6: url
                "\"STATUS\" INTEGER NOT NULL );"); // 7: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUB_DOWNLOAD_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SubDownloadInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pid = entity.getPid();
        if (pid != null) {
            stmt.bindString(2, pid);
        }
        stmt.bindLong(3, entity.getStart());
        stmt.bindLong(4, entity.getEnd());
        stmt.bindLong(5, entity.getIndex());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(6, path);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }
        stmt.bindLong(8, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SubDownloadInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pid = entity.getPid();
        if (pid != null) {
            stmt.bindString(2, pid);
        }
        stmt.bindLong(3, entity.getStart());
        stmt.bindLong(4, entity.getEnd());
        stmt.bindLong(5, entity.getIndex());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(6, path);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }
        stmt.bindLong(8, entity.getStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SubDownloadInfo readEntity(Cursor cursor, int offset) {
        SubDownloadInfo entity = new SubDownloadInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pid
            cursor.getLong(offset + 2), // start
            cursor.getLong(offset + 3), // end
            cursor.getInt(offset + 4), // index
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // path
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // url
            cursor.getInt(offset + 7) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SubDownloadInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStart(cursor.getLong(offset + 2));
        entity.setEnd(cursor.getLong(offset + 3));
        entity.setIndex(cursor.getInt(offset + 4));
        entity.setPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStatus(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SubDownloadInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SubDownloadInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SubDownloadInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "infos" to-many relationship of DownloadInfo. */
    public List<SubDownloadInfo> _queryDownloadInfo_Infos(String pid) {
        synchronized (this) {
            if (downloadInfo_InfosQuery == null) {
                QueryBuilder<SubDownloadInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Pid.eq(null));
                downloadInfo_InfosQuery = queryBuilder.build();
            }
        }
        Query<SubDownloadInfo> query = downloadInfo_InfosQuery.forCurrentThread();
        query.setParameter(0, pid);
        return query.list();
    }

}
