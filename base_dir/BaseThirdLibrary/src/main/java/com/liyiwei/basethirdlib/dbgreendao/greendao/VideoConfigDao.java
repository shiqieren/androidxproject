package com.liyiwei.basethirdlib.dbgreendao.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.liyiwei.basethirdlib.dbgreendao.bean.VideoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_CONFIG".
*/
public class VideoConfigDao extends AbstractDao<VideoConfig, Long> {

    public static final String TABLENAME = "VIDEO_CONFIG";

    /**
     * Properties of entity VideoConfig.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CourseId = new Property(0, long.class, "courseId", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property FileId = new Property(2, long.class, "fileId", false, "FILE_ID");
        public final static Property PlayProgress = new Property(3, double.class, "playProgress", false, "PLAY_PROGRESS");
        public final static Property PlaySecond = new Property(4, int.class, "playSecond", false, "PLAY_SECOND");
        public final static Property Flag = new Property(5, boolean.class, "flag", false, "FLAG");
        public final static Property StartTime = new Property(6, long.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(7, long.class, "endTime", false, "END_TIME");
        public final static Property Type = new Property(8, int.class, "type", false, "TYPE");
    }


    public VideoConfigDao(DaoConfig config) {
        super(config);
    }
    
    public VideoConfigDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_CONFIG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: courseId
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"FILE_ID\" INTEGER NOT NULL ," + // 2: fileId
                "\"PLAY_PROGRESS\" REAL NOT NULL ," + // 3: playProgress
                "\"PLAY_SECOND\" INTEGER NOT NULL ," + // 4: playSecond
                "\"FLAG\" INTEGER NOT NULL ," + // 5: flag
                "\"START_TIME\" INTEGER NOT NULL ," + // 6: startTime
                "\"END_TIME\" INTEGER NOT NULL ," + // 7: endTime
                "\"TYPE\" INTEGER NOT NULL );"); // 8: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_CONFIG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideoConfig entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCourseId());
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getFileId());
        stmt.bindDouble(4, entity.getPlayProgress());
        stmt.bindLong(5, entity.getPlaySecond());
        stmt.bindLong(6, entity.getFlag() ? 1L: 0L);
        stmt.bindLong(7, entity.getStartTime());
        stmt.bindLong(8, entity.getEndTime());
        stmt.bindLong(9, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideoConfig entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCourseId());
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getFileId());
        stmt.bindDouble(4, entity.getPlayProgress());
        stmt.bindLong(5, entity.getPlaySecond());
        stmt.bindLong(6, entity.getFlag() ? 1L: 0L);
        stmt.bindLong(7, entity.getStartTime());
        stmt.bindLong(8, entity.getEndTime());
        stmt.bindLong(9, entity.getType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public VideoConfig readEntity(Cursor cursor, int offset) {
        VideoConfig entity = new VideoConfig( //
            cursor.getLong(offset + 0), // courseId
            cursor.getLong(offset + 1), // userId
            cursor.getLong(offset + 2), // fileId
            cursor.getDouble(offset + 3), // playProgress
            cursor.getInt(offset + 4), // playSecond
            cursor.getShort(offset + 5) != 0, // flag
            cursor.getLong(offset + 6), // startTime
            cursor.getLong(offset + 7), // endTime
            cursor.getInt(offset + 8) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideoConfig entity, int offset) {
        entity.setCourseId(cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setFileId(cursor.getLong(offset + 2));
        entity.setPlayProgress(cursor.getDouble(offset + 3));
        entity.setPlaySecond(cursor.getInt(offset + 4));
        entity.setFlag(cursor.getShort(offset + 5) != 0);
        entity.setStartTime(cursor.getLong(offset + 6));
        entity.setEndTime(cursor.getLong(offset + 7));
        entity.setType(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VideoConfig entity, long rowId) {
        entity.setCourseId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VideoConfig entity) {
        if(entity != null) {
            return entity.getCourseId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VideoConfig entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
