
UploadFileByBlockTask+UploadFileDataTask


//上传文件
    @FormUrlEncoded
    @POST("/fs/v1/upload/")
    Call<String> uploadCloudFile();

    @POST("/fs/v1/upload/")
    @Multipart
    Call<String> uploadCloudFile(@Part("key") RequestBody requestBody, @Part MultipartBody.Part file);

    @POST("/fs/v1/upload/")
    @Multipart
    Call<String> uploadCloudFile(@PartMap Map<String ,Object> map);



    /**
    	 * API /fs/v1/clientupload/ 上传文件的一部分
    	 *
    	 * @param mFile
    	 *            要上传的文件
    	 * @param uploadedSize
    	 *            文件已经被上传的数据的大小
    	 * @param filelen
    	 *            文件整体大小
    	 * @param datalen
    	 *            这一次要上传的数据的大小
    	 * @param path
    	 *            要上传到的目标文件夹的路径
    	 * @param uploadId
    	 *            代表文件上传进度的id
    	 * @param md5
    	 *            文件的MD5
    	 * @return
    	 * 			-1 上传失败<br>
    	 * 			206 上传成功，可以继续上传下一部分<br>
    	 * 			200 文件整体上传完成<br>
    	 * @throws Exception
    	 */
    	public static int uploadBlock(File mFile, Long uploadedSize, Long filelen, Long datalen,
    			String path, String uploadId, String md5,String token) throws Exception {

    		long sum = 0;
    		FileInputStream fis = null;

    		Map<String, Object> mPostMap = new HashMap<String, Object>();
    		mPostMap.put("filelen", filelen.toString());
    		mPostMap.put("datalen", datalen.toString());
    		mPostMap.put("path", path);
    		mPostMap.put("uploadId", uploadId);
    		mPostMap.put("md5", md5);
    		mPostMap.put("base", 0);
    		mPostMap.put("append", (uploadedSize == 0 ? "0" : "1"));

    		URL url = new URL("http://172.16.96.30/fs/v1/clientupload/");// 目标服务器上传接口
    		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
    		conn.setConnectTimeout(5 * 1000);
    		conn.setRequestMethod(HTTP_METHOD_POST);
    		BufferedOutputStream out = null;
    		try {
    			conn.setDoOutput(true);
    			conn.setUseCaches(false);
    			conn.setRequestProperty("Content-type", "multipart/form-data;boundary=" + BOUNDARYSTR);
    			conn.addRequestProperty("cookie", "access_token=" + token);
    			conn.connect();

    			out = new BufferedOutputStream(conn.getOutputStream());
    			StringBuilder sb = new StringBuilder();

    			Iterator<String> it = mPostMap.keySet().iterator();
    			while (it.hasNext()) {
    				String str = it.next();
    				sb.append(BOUNDARY);
    				sb.append("Content-Disposition:form-data;name=\"");
    				sb.append(str);
    				sb.append("\"\r\n\r\n");
    				sb.append(mPostMap.get(str));
    				sb.append("\r\n");
    			}

    			// post the string data.
    			out.write(sb.toString().getBytes());
    			out.write(BOUNDARY.getBytes());

    			StringBuilder filenamesb = new StringBuilder();
    			filenamesb.append("Content-Disposition:form-data;Content-Type:application/octet-stream;name=\"uploadfile");
    			filenamesb.append("\";filename=\"");
    			filenamesb.append(mFile.getName() + "\"\r\n\r\n");
    			out.write(filenamesb.toString().getBytes());

    			fis = new FileInputStream(mFile);
    			if(uploadedSize != 0) {
    				VLog.i(TAG,"skip " + uploadedSize);
    				fis.skip(uploadedSize);
    			}
    			byte[] buffer = new byte[UPLOAD_BUFFER_SIZE]; // 8k
    			int count = 0;
    			// 读取文件
    			while ((count = fis.read(buffer)) != -1) {
    				out.write(buffer, 0, count);
    				sum = sum + count;
    				if(sum == datalen) {
    					VLog.i(TAG,"upload block complete, upload size : " + sum);
    					break;
    				} else if(sum > datalen) {
    					VLog.i(TAG,"upload block error, datalen=" + datalen + " sum=" + sum);
    					return -1;
    				}
    			}

    			out.write("\r\n".getBytes());
    			out.write(("--" + BOUNDARYSTR + "--\r\n").getBytes());
    			out.flush();
    			if(conn.getResponseCode() / 100 == 2) {
    				return conn.getResponseCode();
    			} else {
    				return -1;
    			}
    		} catch (IOException e) {
    			e.printStackTrace();
    			AuthenticationUtil.analysisHttpStatus(conn);
    			return -1;
    		} catch (Exception e) {
    			e.printStackTrace();
    			return -1;
    		} finally {
    			if (out != null) {
    				out.close();
    			}
    			if (fis != null) {
    				fis.close();
    			}
    		}
    	}

    	/**
    	 * API /fs/v1/completemultiupload/ 文件秒传；即服务器已经存在此文件，调用此接口，则代表上传成功
    	 *
    	 * @param md5
    	 *            文件的MD5
    	 * @param uploadId
    	 *            代表文件上传进度的id，从/fs/v1/getcontinfo/接口获得
    	 * @param path
    	 *            要上传的文件的目标路径
    	 */
    	public static void completeUpload(String md5, String uploadId, String path,String token) {
    		String url = "http://172.16.96.30/fs/v1/completemultiupload/?md5=" + md5 + "&uploadId=" + uploadId + "&path=" + path;
    		HttpURLConnection conn = null;
    		InputStream is = null;
    		try {
    			conn = (HttpURLConnection) new URL(url).openConnection();
    			conn.setDoOutput(true);
    			conn.setUseCaches(false);
    			conn.addRequestProperty("cookie", "access_token=" + token);
    			conn.connect();

    			is = conn.getInputStream();
    			ByteArrayOutputStream byteArray = new ByteArrayOutputStream();
    			byte[] buff = new byte[1024];
    			int len = 0;
    			while ((len = is.read(buff)) > 0) {
    				byteArray.write(buff, 0, len);
    			}
    			String returnStr = new String(byteArray.toByteArray());
    			JSONObject json = new JSONObject(returnStr);
    			VLog.i(TAG,returnStr);
    			AuthenticationUtil.analysisReturnJSON(json);
    			if (!json.has("code") || json.getInt("code") != 0) {
    				VLog.i(TAG,"error");
    			}
    		} catch (IOException e) {
    			e.printStackTrace();
    			AuthenticationUtil.analysisHttpStatus(conn);
    		} catch (Exception e) {
    			e.printStackTrace();
    		} finally {
    			if (is != null) {
    				try {
    					is.close();
    					VLog.i(TAG,"ResponseCode:" + conn.getResponseCode());
    					VLog.i(TAG,"ResponseMessage:" + conn.getResponseMessage());
    				} catch (IOException e) {
    				}
    			}
    		}
    	}